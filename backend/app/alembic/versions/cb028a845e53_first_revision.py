"""First revision

Revision ID: cb028a845e53
Revises:
Create Date: 2025-04-03 01:58:51.192245-07:00

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "cb028a845e53"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("CREATE", "USE", "RESTOCK", name="updatetype").create(op.get_bind())
    op.create_table(
        "products",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_products_id"), "products", ["id"], unique=False)
    op.create_table(
        "inventory_history",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("product_id", sa.Integer(), nullable=False),
        sa.Column("quantity_change", sa.Integer(), nullable=False),
        sa.Column("new_quantity", sa.Integer(), nullable=False),
        sa.Column(
            "update_timestamp",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_type",
            postgresql.ENUM(
                "CREATE", "USE", "RESTOCK", name="updatetype", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("update_machine", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_inventory_history_id"), "inventory_history", ["id"], unique=False
    )
    op.execute(
        """
        CREATE OR REPLACE FUNCTION log_inventory_change()
        RETURNS TRIGGER AS $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM inventory_history
                WHERE product_id = NEW.id
                AND update_timestamp >= NOW() - INTERVAL '1 second'  -- Avoid duplicate within the same second
            ) THEN
                INSERT INTO inventory_history (product_id, quantity_change, new_quantity, update_timestamp, update_type)
                VALUES (NEW.id, NEW.quantity - OLD.quantity, NEW.quantity, NOW(), CASE 
                        WHEN NEW.quantity > OLD.quantity THEN 'RESTOCK'::updatetype
                        ELSE 'USE'::updatetype
                    END);
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """
    )
    op.execute(
        """
        CREATE TRIGGER track_inventory_changes
        AFTER UPDATE OF quantity ON products
        FOR EACH ROW
        WHEN (OLD.quantity IS DISTINCT FROM NEW.quantity)
        EXECUTE FUNCTION log_inventory_change();
        """
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_inventory_history_id"), table_name="inventory_history")
    op.drop_table("inventory_history")
    op.drop_index(op.f("ix_products_id"), table_name="products")
    op.drop_table("products")
    sa.Enum("CREATE", "USE", "RESTOCK", name="updatetype").drop(op.get_bind())
    op.execute("DROP TRIGGER IF EXISTS track_inventory_changes ON products;")
    op.execute("DROP FUNCTION IF EXISTS log_inventory_change;")
    # ### end Alembic commands ###
